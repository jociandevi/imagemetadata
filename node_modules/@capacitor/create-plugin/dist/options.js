"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = exports.VALIDATORS = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const cli_1 = require("./cli");
const debug = (0, debug_1.default)('@capacitor/create-plugin:options');
const CLI_ARGS = ['dir'];
const CLI_OPTIONS = ['name', 'package-id', 'class-name', 'repo', 'author', 'license', 'description'];
exports.VALIDATORS = {
    name: (value) => typeof value !== 'string' || value.trim().length === 0
        ? `Must provide a plugin name, e.g. "capacitor-plugin-example"`
        : /^(@[a-z0-9-]+\/)?[a-z0-9-]+$/.test(value)
            ? true
            : `Must be a valid npm package name (lowercase, alphanumeric, kebab-case)`,
    'package-id': (value) => typeof value !== 'string' || value.trim().length === 0
        ? 'Must provide a Package ID, e.g. "com.mycompany.plugins.example"'
        : /[A-Z]/.test(value)
            ? 'Must be lowercase'
            : /^[a-z][a-z0-9_]*(\.[a-z0-9_]+)+$/.test(value)
                ? true
                : `Must be in reverse-DNS format, e.g. "com.mycompany.plugins.example"`,
    'class-name': (value) => typeof value !== 'string' || value.trim().length === 0
        ? `Must provide a plugin class name, e.g. "Example"`
        : /^[A-z0-9]+$/.test(value)
            ? true
            : `Must be CamelCase, e.g. "Example"`,
    repo: (value) => typeof value !== 'string' || value.trim().length === 0 || !/^https?:\/\//.test(value)
        ? `Must be a URL, e.g. "https://github.com/<user>/<repo>"`
        : true,
    author: () => true,
    license: (value) => typeof value !== 'string' || value.trim().length === 0 ? `Must provide a valid license, e.g. "MIT"` : true,
    description: (value) => typeof value !== 'string' || value.trim().length === 0 ? `Must provide a description` : true,
    dir: (value) => typeof value !== 'string' || value.trim().length === 0
        ? `Must provide a directory, e.g. "my-plugin"`
        : /^-/.test(value)
            ? 'Directories should not start with a hyphen.'
            : true,
};
const getOptions = () => {
    const argValues = CLI_ARGS.reduce((opts, option, i) => {
        const value = process.argv[i + 2];
        const validatorResult = exports.VALIDATORS[option](value);
        if (typeof validatorResult === 'string') {
            debug(`invalid positional arg: %s %O: %s`, option, value, validatorResult);
        }
        opts[option] = validatorResult === true ? value : undefined;
        return opts;
    }, {});
    const optionValues = CLI_OPTIONS.reduce((opts, option) => {
        const value = (0, cli_1.getOptionValue)(process.argv, `--${option}`);
        const validatorResult = exports.VALIDATORS[option](value);
        if (typeof validatorResult === 'string') {
            debug(`invalid option: --%s %O: %s`, option, value, validatorResult);
        }
        opts[option] = validatorResult === true ? value : undefined;
        return opts;
    }, {});
    return { ...argValues, ...optionValues };
};
exports.getOptions = getOptions;
