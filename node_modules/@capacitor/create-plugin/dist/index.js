"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = require("fs");
const kleur_1 = tslib_1.__importDefault(require("kleur"));
const path_1 = require("path");
const cli_1 = require("./cli");
const help = tslib_1.__importStar(require("./help"));
const options_1 = require("./options");
const prompt_1 = require("./prompt");
const subprocess_1 = require("./subprocess");
const template_1 = require("./template");
const debug = (0, debug_1.default)('@capacitor/create-plugin');
process.on('unhandledRejection', (error) => {
    process.stderr.write(`ERR: ${error}\n`);
    process.exit(1);
});
const run = async () => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (process.argv.find((arg) => ['-h', '-?', '--help'].includes(arg))) {
        help.run();
        process.exit();
    }
    const options = (0, options_1.getOptions)();
    debug('options from command-line: %O', options);
    if (Object.values(options).includes(undefined)) {
        if (cli_1.isTTY) {
            debug(`Missing/invalid options. Prompting for user input...`);
        }
        else {
            process.stderr.write(`ERR: Refusing to prompt for missing/invalid options in non-TTY environment.\n` +
                `See ${kleur_1.default.bold('--help')}. Run with ${kleur_1.default.bold('--verbose')} for more context.\n`);
            process.exit(1);
        }
    }
    const details = await (0, prompt_1.gatherDetails)(options);
    const dir = (0, path_1.resolve)(process.cwd(), details.dir);
    if ((0, fs_1.existsSync)(dir)) {
        process.stderr.write(`ERR: Not overwriting existing directory: ${kleur_1.default.bold(details.dir)}`);
        process.exit(1);
    }
    await (0, template_1.extractTemplate)(dir, details, 'PLUGIN_TEMPLATE');
    process.stdout.write('Installing dependencies. Please wait...\n');
    const opts = { cwd: details.dir, stdio: 'inherit' };
    try {
        await (0, subprocess_1.run)('npm', ['install', '--no-package-lock'], opts);
        try {
            await (0, subprocess_1.run)('npm', ['run', 'fmt'], opts);
        }
        catch (e) {
            process.stderr.write(`WARN: Could not format source files: ${(_b = (_a = e.message) !== null && _a !== void 0 ? _a : e.stack) !== null && _b !== void 0 ? _b : e}\n`);
        }
    }
    catch (e) {
        process.stderr.write(`WARN: Could not install dependencies: ${(_d = (_c = e.message) !== null && _c !== void 0 ? _c : e.stack) !== null && _d !== void 0 ? _d : e}\n`);
    }
    process.stdout.write('\nCreating test application for developing plugin...\n');
    try {
        await (0, subprocess_1.run)('npm', ['init', '@capacitor/app@latest', 'example', '--', '--name', 'example', '--app-id', 'com.example.plugin'], opts);
        // Add newly created plugin to example app
        const appPackageJsonStr = (0, fs_1.readFileSync)((0, path_1.resolve)(details.dir, 'example', 'package.json'), 'utf8');
        const appPackageJsonObj = JSON.parse(appPackageJsonStr);
        appPackageJsonObj.dependencies[details.name] = 'file:..';
        appPackageJsonObj.dependencies['@capacitor/ios'] = template_1.CAPACITOR_VERSION;
        appPackageJsonObj.dependencies['@capacitor/android'] = template_1.CAPACITOR_VERSION;
        (0, fs_1.writeFileSync)((0, path_1.resolve)(details.dir, 'example', 'package.json'), JSON.stringify(appPackageJsonObj, null, 2));
        // Install packages and add ios and android apps
        await (0, subprocess_1.run)('npm', ['install', '--no-package-lock', '--prefix', 'example'], opts);
        // Build newly created plugin and move into the example folder
        await (0, subprocess_1.run)('npm', ['run', 'build'], opts);
        // remove existing web example
        const wwwDir = (0, path_1.resolve)(dir, 'example', 'src');
        (0, fs_1.rmSync)((0, path_1.resolve)(wwwDir), { recursive: true, force: true });
        // Use www template
        await (0, template_1.extractTemplate)(wwwDir, details, 'WWW_TEMPLATE');
        await (0, subprocess_1.run)('npm', ['run', 'build'], {
            cwd: (0, path_1.resolve)(opts.cwd, 'example'),
            stdio: opts.stdio,
        });
        await (0, subprocess_1.run)('npx', ['cap', 'copy'], {
            cwd: (0, path_1.resolve)(opts.cwd, 'example'),
            stdio: opts.stdio,
        });
        // Add iOS
        await (0, subprocess_1.run)('npx', ['cap', 'add', 'ios'], {
            ...opts,
            cwd: (0, path_1.resolve)(details.dir, 'example'),
        });
        // Add Android
        await (0, subprocess_1.run)('npx', ['cap', 'add', 'android'], {
            ...opts,
            cwd: (0, path_1.resolve)(details.dir, 'example'),
        });
    }
    catch (e) {
        process.stderr.write(`WARN: Could not create test application: ${(_f = (_e = e.message) !== null && _e !== void 0 ? _e : e.stack) !== null && _f !== void 0 ? _f : e}\n`);
    }
    process.stdout.write('Initializing git...\n');
    try {
        await (0, subprocess_1.run)('git', ['init'], opts);
        await (0, subprocess_1.run)('git', ['checkout', '-b', 'main'], opts);
        await (0, subprocess_1.run)('git', ['add', '-A'], opts);
        await (0, subprocess_1.run)('git', ['commit', '-m', 'Initial commit', '--no-gpg-sign'], opts);
    }
    catch (e) {
        process.stderr.write(`WARN: Could not initialize git: ${(_h = (_g = e.message) !== null && _g !== void 0 ? _g : e.stack) !== null && _h !== void 0 ? _h : e}\n`);
    }
    const tada = (0, cli_1.emoji)('ðŸŽ‰', '*');
    process.stdout.write(`
${kleur_1.default.bold(`${tada} Capacitor plugin generated! ${tada}`)}

Next steps:
  - ${kleur_1.default.cyan(`cd ${details.dir}/`)}
  - Open ${kleur_1.default.bold('CONTRIBUTING.md')} to learn about the npm scripts
  - Continue following these docs for plugin development: ${kleur_1.default.bold('https://capacitorjs.com/docs/plugins/workflow')}
  - Questions? Feel free to open a discussion: ${kleur_1.default.bold('https://github.com/ionic-team/capacitor/discussions')}
  - Learn more about the Capacitor Community: ${kleur_1.default.bold('https://github.com/capacitor-community/welcome')} ðŸ’–
`);
};
exports.run = run;
