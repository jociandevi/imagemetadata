"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gatherDetails = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const kleur_1 = tslib_1.__importDefault(require("kleur"));
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const options_1 = require("./options");
const debug = (0, debug_1.default)('@capacitor/create-plugin:prompt');
const gatherDetails = (initialOptions) => {
    prompts_1.default.override(initialOptions);
    return (0, prompts_1.default)([
        {
            type: 'text',
            name: 'name',
            message: `What should be the npm package of your plugin?\n`,
            validate: options_1.VALIDATORS.name,
            format: (value) => value.trim(),
        },
        {
            type: 'text',
            name: 'dir',
            message: `What directory should be used for your plugin?\n`,
            // no TS support for initial as a function
            initial: ((prev) => prev.replace(/^@[^/]+\//, '')),
            validate: options_1.VALIDATORS.dir,
            format: (value) => value.trim(),
        },
        {
            type: 'text',
            name: 'package-id',
            message: `What should be the Package ID for your plugin?\n\n` +
                `${kleur_1.default.reset(`    Package IDs are unique identifiers used in apps and plugins. For plugins,\n` +
                    `    they're used as a Java namespace. They must be in reverse domain name\n` +
                    `    notation, generally representing a domain name that you or your company owns.\n`)}\n`,
            initial: 'com.mycompany.plugins.example',
            validate: options_1.VALIDATORS['package-id'],
            format: (value) => value.trim(),
        },
        {
            type: 'text',
            name: 'class-name',
            message: `What should be the class name for your plugin?\n`,
            initial: 'Example',
            validate: options_1.VALIDATORS['class-name'],
            format: (value) => value.trim(),
        },
        {
            type: 'text',
            name: 'repo',
            message: `What is the repository URL for your plugin?\n`,
            validate: options_1.VALIDATORS.repo,
            format: (value) => value.trim(),
        },
        {
            type: 'text',
            name: 'author',
            message: `${kleur_1.default.reset('(optional)')} ${kleur_1.default.bold('Who is the author of this plugin?')}\n`,
            validate: options_1.VALIDATORS.author,
            format: (value) => value.trim(),
        },
        {
            type: 'select',
            name: 'license',
            message: `What license should be used for your plugin?\n`,
            choices: [
                { title: 'MIT', value: 'MIT' },
                { title: 'ISC', value: 'ISC' },
                { title: 'Apache-2.0', value: 'Apache-2.0' },
                { title: 'other...', value: 'other' },
            ],
        },
        {
            type: (prev) => (prev === 'other' ? 'text' : null),
            name: 'license',
            message: `Enter a SPDX license identifier for your plugin.\n`,
            validate: options_1.VALIDATORS.license,
        },
        {
            type: 'text',
            name: 'description',
            message: `Enter a short description of plugin features.\n`,
            validate: options_1.VALIDATORS.description,
            format: (value) => value.trim(),
        },
    ], {
        onCancel: async () => {
            debug('Prompt cancelled by user.');
            process.exit(1);
        },
    });
};
exports.gatherDetails = gatherDetails;
